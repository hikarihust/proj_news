===================================== Cấu hình virtual host ==================================
loacalhost/proj_news = proj_news.xyz

C:\xampp\apache\conf\extra -----------> httpd-vhosts.conf
    <VirtualHost *:80>
        ServerAdmin proj_news.xyz
        DocumentRoot "C:/xampp/htdocs/proj_news/"
        ServerName proj_news.xyz
        ErrorLog "logs/proj_news.xyz-error.log"
        CustomLog "logs/proj_news.xyz-access.log" common
    </VirtualHost>
C:\Windows\System32\drivers\etc -----------> hosts
    127.0.0.1       proj_news.xyz
    
===================================== Hello Laravel ==================================

- Cài đặt và chạy được source laravel: Thông qua composer
    composer create-project --prefer-dist laravel/laravel proj_news "5.8.*"
    Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
      được public trên link url thì có thể dùng virtual host
    <VirtualHost *:80>
        ServerAdmin proj_news.xyz
        DocumentRoot "C:/xampp/htdocs/proj_news/proj/public"
        ServerName proj_news.xyz
        ErrorLog "logs/proj_news.xyz-error.log"
        CustomLog "logs/proj_news.xyz-access.log" common
    </VirtualHost>
- Remove public trên URL

===================================== Router ==================================
Extension: Laravel 5 Snippets
           Laravel Blade Snippets

- routes ---> web
    http://proj_news.xyz/home
    http://proj_news.xyz/category/1 --> Cách lấy tham số trên 
- Cách dàng buộc tham số trên URL
    Route::get('category/{id}', function ($id) {
        return 'Category '.$id;
    })->where('id', '[0-9]+');
- Tham số có thể được truyền hoặc không được truyền, nếu không truyền thì sẽ lấy tham số mặc định
    Route::get('category/{name?}', function ($name = 'John') {
        return $name;
    });

- URL Prefix: Route::prefix = Route::group
    Quản lý user        http://proj_news.xyz/admin/user
    Quản lý slider      http://proj_news.xyz/admin/slider
    Quản lý category    http://proj_news.xyz/admin/category

Quản lý chi tiết slider: Nhóm tiếp cho slider
    Danh sách slider    http://proj_news.xyz/admin/slider
    Edit slider         http://proj_news.xyz/admin/slider/edit/12
    Xóa slider          http://proj_news.xyz/admin/slider/delete/12

===================================== Controller ==================================
Với mỗi đường dẫn, router ---> có thể điều hướng đến Controller để thực hiện công việc, task vụ
Biết cách định nghĩa prefix, Giảm sự lặp lại khi code, dùng Controller định nghĩa cho router

===================================== Controller View ==================================
Cách khai báo phần view của 1 action nào đó
===================================== params ==================================
Cách lấy params từ trên url, trong phần khai báo router mình đã khai báo nhận vào id
Cách truyền 1 or nhiều giá trị từ action ra ngoài view

===================================== request ==================================
Keyword: laravel request get router parameters
Router có nhiều tham số --> trong action lấy theo thứ tự mà mình đã khai báo trên router
Trong trường hợp có nhiều tham số thì sử dụng đến Request
    $request->route('id');

===================================== route name ==================================
Đặt tên(định danh) cho route, khi cần gọi nó ở phần view thì gọi đến tên của route
redirect: Khi dùng đến phương thức redirect() của laravel thì cần phải truyền vào tên của route
Keyword: laravel share data with all views
    Cách truyền dữ liệu từ Controller đến tất cả các view của Controller đó

===================================== Nhúng giao diện cho backend ==================================
extends --> Lấy toàn bộ nội dung của tập tin khác đưa vào 
Keyword: laravel asset
Sử dụng asset() để load các tập tin về js, css, hình ảnh
  Mặc định thì phương thức asset này nó sẽ vào trong folder public
split file: Tách tập tin main ra thành nhiều tập tin nhỏ hơn
  Các phần về meta, css -> tách ra làm 1 tập tin riêng
  include: Bắt đầu đi vào từ 'views'
  yield(): Định nghĩa vùng, vị trí xuất hiện trong main
  section(): Lấy nội dung để đổ vào vùng trong main
menu link: Gắn link cho menu
=============================== Xây dựng chức năng lấy danh sách Slider ============================
fix image: fix link cho phần image, tách view cho phần danh sách
database: Cấu trúc bảng slider, dữ liệu demo và các hình ảnh
connect db: Kết nối được đến database, lấy ra được danh sách các table trong database
    Keyword: Laravel test database connection, laravel show tables
    use DB 
    $tables = DB::select('SHOW TABLES');
init model:
    Eloquent ORM 
    php artisan make:model SliderModel
all: Lấy ra danh sách slider
optimize model: 
    Tạo folder Models để quản lý các tập tin Model
    params: Chứa các tham số cần cho câu truy vấn
    options: Dùng để viết được nhiều các trường hợp xử lý khác nhau
debugbar: Cài đặt debugbar để dễ dàng trong việc debug
    Biết cách xem được câu Query
    Keyword: Laravel get query string, Laravel debugbar
    Laravel debugbar giúp ta xem được thông tin của nhiều thứ như: route, view, các câu lệnh truy vấn
    Cách cài đặt: composer require barryvdh/laravel-debugbar --dev
    Nó được kích hoạt khi:
        APP_DEBUG=true
        'debug' => env('APP_DEBUG', false),
select: Cách thay đổi để viết câu truy vấn làm sao để nó chỉ lấy ra các cột cần thiết mà thôi
    Keyword: Laravel Eloquent select columns
    Nên sử dụng select() và liệt kê ra tên của các field cần lấy chứ không nên dùng select('*')
    Sử dụng self thay cho việc dùng tên class khi thực hiện các câu lệnh truy vấn ở trong chính class đó
    Muốn xem kết quả thu được từ câu query thì dùng $items->toArray()
=============================== Xây dựng chức năng hiển thị danh sách Slider ============================
if else - where:
    Nếu như có dữ liệu thì hiện thị ra danh sách dữ liệu, còn nếu như không có dữ liệu thì hiển thị ra câu
        thông báo là không có dữ liệu
    if else khi sử dụng blade template
    Laravel doc: blade
    Keyword: Laravel Eloquent where greater than
list_empty:
    Khi xây dựng phần quản lý cho các phần khác thì trong trường hợp không có dữ liệu thì cấu trúc của nó là
        tương tự mà chỉ khác ở phần colpan mà thôi
    folder templates: Chứa giao diện dùng chung
    Bố trí lại các views của các Controller -> đặt trong folder pages
foreach:
    Đổ dữ liệu lấy ra được ra phần danh sách
showItemHistory:
    Tạo helper showItemHistory để tạo ra phần code tạo ra và chỉnh sửa bởi ai, vào time nào
showItemStatus:
    Tạo mã nguồn cho phần status
showItemThumb: 
    Xử lý phần hiển thị tấm hình
showButtonAction: Show ra danh sách button
    Tối ưu phần hiển thị button
    Nâng cấp để nó mang tính mở rộng đối với từng Controller(có thể tùy chỉnh được số nút...)
    Ở mỗi button thì khác nhau ở 1 số thuộc tính như sau: class, title, icon, link(tên của route)
    Ở mỗi trang thì số nút cần hiển thị là khác nhau
x_title:
    Tối ưu mã nguỗn phần title ở mỗi box
======================================= Xây dựng chức năng phân trang ====================================
split pagination:
    Tách phần mã nguồn phân trang
    Không phải lúc nào phần phân trang cũng hiển thị:
        ->Khi không có dữ liệu thì sẽ không hiển thị phân trang 
paginate:
    Laravel hỗ trợ chức năng phân trang, sử dụng phương thức paginate()
custom view:
    Từ dữ liệu đã được phân trang thì mình có thể xác định được tổng số phần tử, tổng số trang, tổng số phần tử
    trên 1 trang, link phân trang(total(), lastPage(), perPage(), currentPage(), hasPages(), previousPageUrl(), 
    nextPageUrl(), url($i)...)
    Có thể customer lại giao diện phần tạo link phân trang
    Keyword: Laravel custom pagination
    Cấu trúc customize đơn giản
    @if ($items->lastPage() > 1)
    <ul class="pagination">
        <li class="{{ ($items->currentPage() == 1) ? ' disabled' : '' }}">
            <a href="{{ $items->url($items->currentPage()-1) }}">Previous</a>
        </li>
        @for ($i = 1; $i <= $items->lastPage(); $i++)
            <li class="{{ ($items->currentPage() == $i) ? ' active' : '' }}">
                <a href={{ $items->url($i) }}">Trang {{ $i }}</a>
            </li>
        @endfor
        <li class="{{ ($items->currentPage() == $items->lastPage()) ? ' disabled' : '' }}">
            <a href="{{ $items->url($items->currentPage()+1) }}" >Next</a>
        </li>
    </ul>
    @endif
fix pagination
    Đối với tham số là có tên là paginator thì không cần truyền -> Laravel sẽ tự hiểu
  ======================================= Xây dựng chức năng filter ====================================
- countByStatus:
    Group by
    Biết cách sử dụng DB::raw() trong các trường hợp count, max, min...
- showButtonFilter:
    All, Active, Inactive
    All ở vị trí đầu tiên
    Tạo helper trong template để tạo mã html
- template status:
    Đồng nhất các giá trị hiển thị Active-Kích hoạt, Inactive - Chưa kích hoạt -> config giá trị cho status
- block:
    Xử lý trường họp khi mà trong DB xuất hiện thêm 1 status mới, chưa định nghĩa giao diện của nó trong config
        -> trong config, thêm 1 giá trị mới đó là default
- link:
    Gắn link cho các nút filter
- active: 
    Khi nút Filter nào được nhấn thì nút đó phải được active
- filter:
    Dựa vào status để lọc ra danh sách
    Khi tồn tại giá trị filter-status và khác giá trị all thì sẽ tiến hành lọc dữ liệu
  ======================================= Xây dựng chức năng tìm kiếm ====================================
- showAreaSearch:
    Tách ra phần xử lý hiển thị phần tìm kiếm
- fieldInController:
    Cấu hình tùy chỉnh linh hoạt phần SelectBox tìm kiếm
- config:
    Đưa phần fieldInController vào trong phần config
    Tương tự như vậy điều chỉnh cho phần showButtonAction, phần cấu hình cho các Button
- search_field:
    Khi người dùng tiến hành search thì cần phải biết người dùng tiến hành search theo field nào và giá trị search là 
        bao nhiêu
    Khi người dùng nhấn vào lựa chọn các giá trị trong SelectBox thì cần lấy được giá trị tên trường mà người dùng search là 
        trường nào -> javascript
- btnSearch event:
    Viết sự kiện cho nút tìm kiếm khi nó được click vào
- active:
    Active giá trị selectBox ở ô tìm kiếm và giữ lại value đã nhập vào trong ô tìm kiếm
- search by field:
    Dựa vào các giá trị trên URL để lọc ra các phần tử phù hợp với các giá trị cần search(Lọc theo field cần search)
    Chia thành 2 trường hợp search đó là trường hợp người dùng chọn vào nút All và trường hợp thứ 2 đó là người dùng chọn search theo 
        1 trường nào đó(Cần kiểm tra tên field lấy từ trên URL có đúng hay không? nếu đúng thì cho phép search)
- search by all:
    Trong trường hợp mà giá trị của param search_field là all thì có nghĩa là vừa search theo id, name, description và link
    Keyword: Laravel or where
    Khi ban đầu để tìm kiếm là tìm kiếm theo trường name -> sau khi nhấn nút tìm kiếm xong và tiếp tục nhấn nút tìm kiếm thì lúc này
        trang vẫn phải được tìm kiếm theo trường name...
- search and filter:
    Kết hợp cả search và filter -> khi thực hiện tìm kiếm thì cần phải giữ lại trạng thái của filter -> js
    Đối tượng URLSearchParams được tạo ra từ window.location.search
    Người dùng nhập 1 giá trị nào đó thì mới tải lại trang và thực hiện tìm kiếm, còn không nhập gì mà nhấn tìm kiếm thì đưa ra trang
        thông báo
- btnClearSearch event:
    Khi thực hiện cho Button thực hiện xóa tìm kiếm thì field tìm kiếm sẽ quay về trạng thái rỗng(all), giá trị tìm kiếm cũng sẽ quay về
        trạng thái rỗng
    Filter thì không bị ảnh hưởng(giữ nguyên lại trạng thái filter)
- countByStatus:
    Cập nhật lại các giá trị count của các nút Filter khi nhấn nút thực hiện tìm kiếm
- search filter pagination:
    Khi nhấn vào các Button Filter thì vẫn phải giữ lại các giá trị search -> search theo field nào và search với value là bao nhiêu
    Khi thực hiện chyển trang thì cần phải giữ lại các giá trị lọc filter_status, các giá trị tìm kiếm -> Xử dụng đến phương thức appends()
        của phân trang, lấy cái link URL hiện tạo và appends vào link phân trang
    Ở đây ngoài cách đưa các giá trị lên URL để xử lý thì cũng có thể đưa các giá trị vào Submit Form với phương thức là POST để xử lý
        hoặc là đưa các giá trị vào trong Session
- Highlight:
    Hightlight từ khóa tìm kiếm ở các kết quả tìm được
    Tìm theo trường nào thì Hightlight theo trường đó

  =========================================== Xây dựng chức năng Change status ========================================
- change status:
    Khi nhấn vào nút trạng thái của phần tử thì ta sẽ biết được trạng thái của phần tử là trạng thái nào, id là bao nhiêu rồi từ đó sẽ cập
        nhật lại trạng thái cho phần tử
    Từ giá trị tham số được truyền vào route thì ở method trong Controller có thể lấy được bằng đối tượng request 
- notify:
    Hiển thị lên câu thông báo khi cập nhật trạng thái cho phần tử
    Keyword: Redirecting With Flashed Session Data
- Localization
  =============================================== Xây dựng chức năng Delete ============================================
- delete:
    Xây dựng chức năng delete phần tử
    Sau khi xóa phần tử xong thì redirect về trang list và hiển thị lên câu thông báo
    Khi click vào nút delete thì cần hiển thị lên 1 hộp thoại để xác nhận xóa hay không
    Keyword: display a confirmation dialog when clicking an <a> link
  =============================================== Xây dựng chức năng Form ============================================
- template: 
    Xây dựng chức năng thêm mới 1 phần tử nào đó
    Setting route có dạng là form/{id?} trong trường hợp có id thì là Edit còn không có id thì là thêm mới
    Copy từ giao diện của index
    Thay đổi icon quy về
- page header:
    Tách phần giao diện của phần header page cho trang index và form
- getItem:
    Khi nhấn vào nút Edit thì cũng sẽ chuyển đến Form
    Từ giá trị id nhận được trong method form thì sẽ kiểm tra được đâu là trường hợp thêm mới và đâu là trường hợp Edit, từ id
        này sẽ lấy ra được thông tin phần tử muốn thực hiện việc Edit
- collective:
    Keyword: Laravel collective
    Installation: composer require 'laravelcollective/html:^5.8.0'
    Sau khi cài đặt xong thì có thể kiểm tra Form bằng cách:
        {{ Form::open(['url' => 'foo/bar']) }}
        <h3>test</h3>
        {{ Form::close() }}
    -> Lúc này trên view sẽ tự động sinh ra 1 thẻ input _token ẩn mà ko cần sử dụng @csrf như trong Form của Blade template
Better Align
- name description:
    Biết cách tạo ra label và ô input bằng cách sử dụng Form collective
- FormTemplate:
    Tối ưu mã nguồn tạo ra các thành phần có trong Form bằng cách viết thêm helper hỗ trợ việc tạo ra các phần tử trong form
- select button:
    Cấu trúc Form của submit button khác với cấu trúc của các ô input thông thường -> khi viết helper thì cần kiểm tra phần tử đó
        có phải là button hay không để xử lý định dạng cho button submit
- formGroup:
    Để cho vấn đề ifelse được thực hiện đơn giản thì viết thêm phương thức mới formGroup trong đó dùng switch để kiểm tra phần tử
    phần tử trong Form và tạo ra cấu trúc html cho nó
- thumb:
    Ô input nằm ở bên trong có kiểu là file
    Đối với trường hợp Edit thì có tấm hình hiện tại do đó cần phải show ra tấm hình hiện tại của nó
- hidden:
    Thực hiện thêm vào các phần tử input ẩn

  =============================================== Xây dựng chức năng Validate ============================================
- basic:
    Khi form gửi request đến save, ở đây trước khi thực hiện lưu dữ liệu vào trong database thì cần phải kiểm tra xem dữ liệu đó
    có hợp lệ hay không
    Khi nội dung nhập vào Form chưa hợp lệ thì trang form sẽ tiếp tục được tải lại và không thực hiện phần tiếp theo trong phương
        thức save
    Document: Form Request Validation
                Available Validation Rules
- message:
    In ra câu thông báo hiển thị lỗi
    Document: Displaying The Validation Errors
    bail: Không cần Validate các rule tiếp theo của trường được Validate khi có 1 rule đã fail
- SliderRequest:
    Tách phần sử lý Validate ra thành 1 tập tin riêng để giảm thiểu mã nguồn nằm trong tập Controller
    php artisan make:request SliderRequest
    Khai báo các rule Validate
    Authorizing Form Requests: Cấp quyền authorize() là return true
    Customizing The Error Messages: Custom câu thông báo lỗi
    Customizing The Validation Attributes
    -> Biết cách tạo ra 1 tập tin Validate riêng và biết cách custom lại câu thông báo lỗi, các thuộc tính hiển thị ra phía ngoài người dùng
  =============================================== Xây dựng chức năng Add ============================================
- insert: Thêm mới phần tử
    migration seed slider table
    Lưu thông tin của 1 phần tử
    Keyword: insert
    Đối với trường status thì cần phải Validate yêu cầu người dùng kích hoạt chọn kích hoạt hoặc là không kích hoạt
    -> Validate trường status có giá trị nằm trong hoặc là active hoặc là inactive
    array_flip(): Tạo ra 1 mảng mới trong đó thì giá trị của value và key được hoán đổi cho nhau
    Nếu sử dụng Eloquent Inserting & Updating Models thì giá trị của created_at và updated_at sẽ tự động được lưu
    