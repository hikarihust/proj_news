===================================== Cấu hình virtual host ==================================
loacalhost/proj_news = proj_news.xyz

C:\xampp\apache\conf\extra -----------> httpd-vhosts.conf
    <VirtualHost *:80>
        ServerAdmin proj_news.xyz
        DocumentRoot "C:/xampp/htdocs/proj_news/"
        ServerName proj_news.xyz
        ErrorLog "logs/proj_news.xyz-error.log"
        CustomLog "logs/proj_news.xyz-access.log" common
    </VirtualHost>
C:\Windows\System32\drivers\etc -----------> hosts
    127.0.0.1       proj_news.xyz
    
===================================== Hello Laravel ==================================

- Cài đặt và chạy được source laravel: Thông qua composer
    composer create-project --prefer-dist laravel/laravel proj_news "5.8.*"
    Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
      được public trên link url thì có thể dùng virtual host
    <VirtualHost *:80>
        ServerAdmin proj_news.xyz
        DocumentRoot "C:/xampp/htdocs/proj_news/proj/public"
        ServerName proj_news.xyz
        ErrorLog "logs/proj_news.xyz-error.log"
        CustomLog "logs/proj_news.xyz-access.log" common
    </VirtualHost>
- Remove public trên URL

===================================== Router ==================================
Extension: Laravel 5 Snippets
           Laravel Blade Snippets

- routes ---> web
    http://proj_news.xyz/home
    http://proj_news.xyz/category/1 --> Cách lấy tham số trên 
- Cách dàng buộc tham số trên URL
    Route::get('category/{id}', function ($id) {
        return 'Category '.$id;
    })->where('id', '[0-9]+');
- Tham số có thể được truyền hoặc không được truyền, nếu không truyền thì sẽ lấy tham số mặc định
    Route::get('category/{name?}', function ($name = 'John') {
        return $name;
    });

- URL Prefix: Route::prefix = Route::group
    Quản lý user        http://proj_news.xyz/admin/user
    Quản lý slider      http://proj_news.xyz/admin/slider
    Quản lý category    http://proj_news.xyz/admin/category

Quản lý chi tiết slider: Nhóm tiếp cho slider
    Danh sách slider    http://proj_news.xyz/admin/slider
    Edit slider         http://proj_news.xyz/admin/slider/edit/12
    Xóa slider          http://proj_news.xyz/admin/slider/delete/12

===================================== Controller ==================================
Với mỗi đường dẫn, router ---> có thể điều hướng đến Controller để thực hiện công việc, task vụ
Biết cách định nghĩa prefix, Giảm sự lặp lại khi code, dùng Controller định nghĩa cho router

===================================== Controller View ==================================
Cách khai báo phần view của 1 action nào đó
===================================== params ==================================
Cách lấy params từ trên url, trong phần khai báo router mình đã khai báo nhận vào id
Cách truyền 1 or nhiều giá trị từ action ra ngoài view

===================================== request ==================================
Keyword: laravel request get router parameters
Router có nhiều tham số --> trong action lấy theo thứ tự mà mình đã khai báo trên router
Trong trường hợp có nhiều tham số thì sử dụng đến Request
    $request->route('id');

===================================== route name ==================================
Đặt tên(định danh) cho route, khi cần gọi nó ở phần view thì gọi đến tên của route
redirect: Khi dùng đến phương thức redirect() của laravel thì cần phải truyền vào tên của route
Keyword: laravel share data with all views
    Cách truyền dữ liệu từ Controller đến tất cả các view của Controller đó

===================================== Nhúng giao diện cho backend ==================================
extends --> Lấy toàn bộ nội dung của tập tin khác đưa vào 
Keyword: laravel asset
Sử dụng asset() để load các tập tin về js, css, hình ảnh
  Mặc định thì phương thức asset này nó sẽ vào trong folder public
split file: Tách tập tin main ra thành nhiều tập tin nhỏ hơn
  Các phần về meta, css -> tách ra làm 1 tập tin riêng
  include: Bắt đầu đi vào từ 'views'
  yield(): Định nghĩa vùng, vị trí xuất hiện trong main
  section(): Lấy nội dung để đổ vào vùng trong main
menu link: Gắn link cho menu
=============================== Xây dựng chức năng lấy danh sách Slider ============================
fix image: fix link cho phần image, tách view cho phần danh sách
database: Cấu trúc bảng slider, dữ liệu demo và các hình ảnh
connect db: Kết nối được đến database, lấy ra được danh sách các table trong database
    Keyword: Laravel test database connection, laravel show tables
    use DB 
    $tables = DB::select('SHOW TABLES');
init model:
    Eloquent ORM 
    php artisan make:model SliderModel
all: Lấy ra danh sách slider
optimize model: 
    Tạo folder Models để quản lý các tập tin Model
    params: Chứa các tham số cần cho câu truy vấn
    options: Dùng để viết được nhiều các trường hợp xử lý khác nhau
debugbar: Cài đặt debugbar để dễ dàng trong việc debug
    Biết cách xem được câu Query
    Keyword: Laravel get query string, Laravel debugbar
    Laravel debugbar giúp ta xem được thông tin của nhiều thứ như: route, view, các câu lệnh truy vấn
    Cách cài đặt: composer require barryvdh/laravel-debugbar --dev
    Nó được kích hoạt khi:
        APP_DEBUG=true
        'debug' => env('APP_DEBUG', false),
select: Cách thay đổi để viết câu truy vấn làm sao để nó chỉ lấy ra các cột cần thiết mà thôi
    Keyword: Laravel Eloquent select columns
    Nên sử dụng select() và liệt kê ra tên của các field cần lấy chứ không nên dùng select('*')
    Sử dụng self thay cho việc dùng tên class khi thực hiện các câu lệnh truy vấn ở trong chính class đó
    Muốn xem kết quả thu được từ câu query thì dùng $items->toArray()
=============================== Xây dựng chức năng hiển thị danh sách Slider ============================
if else - where:
    Nếu như có dữ liệu thì hiện thị ra danh sách dữ liệu, còn nếu như không có dữ liệu thì hiển thị ra câu
        thông báo là không có dữ liệu
    if else khi sử dụng blade template
    Laravel doc: blade
    Keyword: Laravel Eloquent where greater than
list_empty:
    Khi xây dựng phần quản lý cho các phần khác thì trong trường hợp không có dữ liệu thì cấu trúc của nó là
        tương tự mà chỉ khác ở phần colpan mà thôi
    folder templates: Chứa giao diện dùng chung
    Bố trí lại các views của các Controller -> đặt trong folder pages
foreach:
    Đổ dữ liệu lấy ra được ra phần danh sách
showItemHistory:
    Tạo helper showItemHistory để tạo ra phần code tạo ra và chỉnh sửa bởi ai, vào time nào
showItemStatus:
    Tạo mã nguồn cho phần status
showItemThumb: 
    Xử lý phần hiển thị tấm hình
showButtonAction: Show ra danh sách button
    Tối ưu phần hiển thị button
    Nâng cấp để nó mang tính mở rộng đối với từng Controller(có thể tùy chỉnh được số nút...)
    Ở mỗi button thì khác nhau ở 1 số thuộc tính như sau: class, title, icon, link(tên của route)
    Ở mỗi trang thì số nút cần hiển thị là khác nhau
x_title:
    Tối ưu mã nguỗn phần title ở mỗi box
======================================= Xây dựng chức năng phân trang ====================================
split pagination:
    Tách phần mã nguồn phân trang
    Không phải lúc nào phần phân trang cũng hiển thị:
        ->Khi không có dữ liệu thì sẽ không hiển thị phân trang 
paginate:
    Laravel hỗ trợ chức năng phân trang, sử dụng phương thức paginate()
custom view:
    Từ dữ liệu đã được phân trang thì mình có thể xác định được tổng số phần tử, tổng số trang, tổng số phần tử
    trên 1 trang, link phân trang(total(), lastPage(), perPage(), currentPage(), hasPages(), previousPageUrl(), 
    nextPageUrl(), url($i)...)
    Có thể customer lại giao diện phần tạo link phân trang
    Keyword: Laravel custom pagination
    Cấu trúc customize đơn giản
    @if ($items->lastPage() > 1)
    <ul class="pagination">
        <li class="{{ ($items->currentPage() == 1) ? ' disabled' : '' }}">
            <a href="{{ $items->url($items->currentPage()-1) }}">Previous</a>
        </li>
        @for ($i = 1; $i <= $items->lastPage(); $i++)
            <li class="{{ ($items->currentPage() == $i) ? ' active' : '' }}">
                <a href={{ $items->url($i) }}">Trang {{ $i }}</a>
            </li>
        @endfor
        <li class="{{ ($items->currentPage() == $items->lastPage()) ? ' disabled' : '' }}">
            <a href="{{ $items->url($items->currentPage()+1) }}" >Next</a>
        </li>
    </ul>
    @endif
fix pagination
    Đối với tham số là có tên là paginator thì không cần truyền -> Laravel sẽ tự hiểu
  ======================================= Xây dựng chức năng filter ====================================
- countByStatus:
    Group by
    Biết cách sử dụng DB::raw() trong các trường hợp count, max, min...
- showButtonFilter:
    All, Active, Inactive
    All ở vị trí đầu tiên
    Tạo helper trong template để tạo mã html
- template status:
    Đồng nhất các giá trị hiển thị Active-Kích hoạt, Inactive - Chưa kích hoạt -> config giá trị cho status
- block:
    Xử lý trường họp khi mà trong DB xuất hiện thêm 1 status mới, chưa định nghĩa giao diện của nó trong config
        -> trong config, thêm 1 giá trị mới đó là default
- link:
    Gắn link cho các nút filter
- active: 
    Khi nút Filter nào được nhấn thì nút đó phải được active
- filter:
    Dựa vào status để lọc ra danh sách
    Khi tồn tại giá trị filter-status và khác giá trị all thì sẽ tiến hành lọc dữ liệu
  ======================================= Xây dựng chức năng tìm kiếm ====================================
- showAreaSearch:
    Tách ra phần xử lý hiển thị phần tìm kiếm
- fieldInController:
    Cấu hình tùy chỉnh linh hoạt phần SelectBox tìm kiếm
- config:
    Đưa phần fieldInController vào trong phần config
    Tương tự như vậy điều chỉnh cho phần showButtonAction, phần cấu hình cho các Button
- search_field:
    Khi người dùng tiến hành search thì cần phải biết người dùng tiến hành search theo field nào và giá trị search là 
        bao nhiêu
    Khi người dùng nhấn vào lựa chọn các giá trị trong SelectBox thì cần lấy được giá trị tên trường mà người dùng search là 
        trường nào -> javascript
- btnSearch event:
    Viết sự kiện cho nút tìm kiếm khi nó được click vào
- active:
    Active giá trị selectBox ở ô tìm kiếm và giữ lại value đã nhập vào trong ô tìm kiếm
- search by field:
    Dựa vào các giá trị trên URL để lọc ra các phần tử phù hợp với các giá trị cần search(Lọc theo field cần search)
    Chia thành 2 trường hợp search đó là trường hợp người dùng chọn vào nút All và trường hợp thứ 2 đó là người dùng chọn search theo 
        1 trường nào đó(Cần kiểm tra tên field lấy từ trên URL có đúng hay không? nếu đúng thì cho phép search)
- search by all:
    Trong trường hợp mà giá trị của param search_field là all thì có nghĩa là vừa search theo id, name, description và link
    Keyword: Laravel or where
    Khi ban đầu để tìm kiếm là tìm kiếm theo trường name -> sau khi nhấn nút tìm kiếm xong và tiếp tục nhấn nút tìm kiếm thì lúc này
        trang vẫn phải được tìm kiếm theo trường name...
- search and filter:
    Kết hợp cả search và filter -> khi thực hiện tìm kiếm thì cần phải giữ lại trạng thái của filter -> js
    Đối tượng URLSearchParams được tạo ra từ window.location.search
    Người dùng nhập 1 giá trị nào đó thì mới tải lại trang và thực hiện tìm kiếm, còn không nhập gì mà nhấn tìm kiếm thì đưa ra trang
        thông báo
- btnClearSearch event:
    Khi thực hiện cho Button thực hiện xóa tìm kiếm thì field tìm kiếm sẽ quay về trạng thái rỗng(all), giá trị tìm kiếm cũng sẽ quay về
        trạng thái rỗng
    Filter thì không bị ảnh hưởng(giữ nguyên lại trạng thái filter)
- countByStatus:
    Cập nhật lại các giá trị count của các nút Filter khi nhấn nút thực hiện tìm kiếm
- search filter pagination:
    Khi nhấn vào các Button Filter thì vẫn phải giữ lại các giá trị search -> search theo field nào và search với value là bao nhiêu
    Khi thực hiện chyển trang thì cần phải giữ lại các giá trị lọc filter_status, các giá trị tìm kiếm -> Xử dụng đến phương thức appends()
        của phân trang, lấy cái link URL hiện tạo và appends vào link phân trang
    Ở đây ngoài cách đưa các giá trị lên URL để xử lý thì cũng có thể đưa các giá trị vào Submit Form với phương thức là POST để xử lý
        hoặc là đưa các giá trị vào trong Session
- Highlight:
    Hightlight từ khóa tìm kiếm ở các kết quả tìm được
    Tìm theo trường nào thì Hightlight theo trường đó

  =========================================== Xây dựng chức năng Change status ========================================
- change status:
    Khi nhấn vào nút trạng thái của phần tử thì ta sẽ biết được trạng thái của phần tử là trạng thái nào, id là bao nhiêu rồi từ đó sẽ cập
        nhật lại trạng thái cho phần tử
    Từ giá trị tham số được truyền vào route thì ở method trong Controller có thể lấy được bằng đối tượng request 
- notify:
    Hiển thị lên câu thông báo khi cập nhật trạng thái cho phần tử
    Keyword: Redirecting With Flashed Session Data
- Localization
  =============================================== Xây dựng chức năng Delete ============================================
- delete:
    Xây dựng chức năng delete phần tử
    Sau khi xóa phần tử xong thì redirect về trang list và hiển thị lên câu thông báo
    Khi click vào nút delete thì cần hiển thị lên 1 hộp thoại để xác nhận xóa hay không
    Keyword: display a confirmation dialog when clicking an <a> link
  =============================================== Xây dựng chức năng Form ============================================
- template: 
    Xây dựng chức năng thêm mới 1 phần tử nào đó
    Setting route có dạng là form/{id?} trong trường hợp có id thì là Edit còn không có id thì là thêm mới
    Copy từ giao diện của index
    Thay đổi icon quy về
- page header:
    Tách phần giao diện của phần header page cho trang index và form
- getItem:
    Khi nhấn vào nút Edit thì cũng sẽ chuyển đến Form
    Từ giá trị id nhận được trong method form thì sẽ kiểm tra được đâu là trường hợp thêm mới và đâu là trường hợp Edit, từ id
        này sẽ lấy ra được thông tin phần tử muốn thực hiện việc Edit
- collective:
    Keyword: Laravel collective
    Installation: composer require 'laravelcollective/html:^5.8.0'
    Sau khi cài đặt xong thì có thể kiểm tra Form bằng cách:
        {{ Form::open(['url' => 'foo/bar']) }}
        <h3>test</h3>
        {{ Form::close() }}
    -> Lúc này trên view sẽ tự động sinh ra 1 thẻ input _token ẩn mà ko cần sử dụng @csrf như trong Form của Blade template
Better Align
- name description:
    Biết cách tạo ra label và ô input bằng cách sử dụng Form collective
- FormTemplate:
    Tối ưu mã nguồn tạo ra các thành phần có trong Form bằng cách viết thêm helper hỗ trợ việc tạo ra các phần tử trong form
- select button:
    Cấu trúc Form của submit button khác với cấu trúc của các ô input thông thường -> khi viết helper thì cần kiểm tra phần tử đó
        có phải là button hay không để xử lý định dạng cho button submit
- formGroup:
    Để cho vấn đề ifelse được thực hiện đơn giản thì viết thêm phương thức mới formGroup trong đó dùng switch để kiểm tra phần tử
    phần tử trong Form và tạo ra cấu trúc html cho nó
- thumb:
    Ô input nằm ở bên trong có kiểu là file
    Đối với trường hợp Edit thì có tấm hình hiện tại do đó cần phải show ra tấm hình hiện tại của nó
- hidden:
    Thực hiện thêm vào các phần tử input ẩn

  =============================================== Xây dựng chức năng Validate ============================================
- basic:
    Khi form gửi request đến save, ở đây trước khi thực hiện lưu dữ liệu vào trong database thì cần phải kiểm tra xem dữ liệu đó
    có hợp lệ hay không
    Khi nội dung nhập vào Form chưa hợp lệ thì trang form sẽ tiếp tục được tải lại và không thực hiện phần tiếp theo trong phương
        thức save
    Document: Form Request Validation
                Available Validation Rules
- message:
    In ra câu thông báo hiển thị lỗi
    Document: Displaying The Validation Errors
    bail: Không cần Validate các rule tiếp theo của trường được Validate khi có 1 rule đã fail
- SliderRequest:
    Tách phần sử lý Validate ra thành 1 tập tin riêng để giảm thiểu mã nguồn nằm trong tập Controller
    php artisan make:request SliderRequest
    Khai báo các rule Validate
    Authorizing Form Requests: Cấp quyền authorize() là return true
    Customizing The Error Messages: Custom câu thông báo lỗi
    Customizing The Validation Attributes
    -> Biết cách tạo ra 1 tập tin Validate riêng và biết cách custom lại câu thông báo lỗi, các thuộc tính hiển thị ra phía ngoài người dùng
  =============================================== Xây dựng chức năng Add ============================================
- insert: Thêm mới phần tử
    migration seed slider table
    Lưu thông tin của 1 phần tử
    Keyword: insert
    Đối với trường status thì cần phải Validate yêu cầu người dùng kích hoạt chọn kích hoạt hoặc là không kích hoạt
    -> Validate trường status có giá trị nằm trong hoặc là active hoặc là inactive
    array_flip(): Tạo ra 1 mảng mới trong đó thì giá trị của value và key được hoán đổi cho nhau
    Nếu sử dụng Eloquent Inserting & Updating Models thì giá trị của created_at và updated_at sẽ tự động được lưu
- upload:
    Khi thêm 1 slider nào đó thì cần phải thêm tấm hình cho slider đó
    Validate kiểu của file là image, giới hạn max là bao nhiêu kb
    Xử lý upload tấm hình lên server
    Keyword:
        Illuminate\Http\UploadedFile Object; Uploaded Files
        helper(tạo ra 1 chuỗi string ramdom)
        laravel storage change path upload
    Khi sử dụng phương thức store() thì tập tin sẽ được up vào thư mục store/app
    Khi lưu ảnh vào server thì đổi tên file bằng 1 tên ngẫu nhiên
    Thay đổi nơi lưu tấm hình mà mình upload lên khi sử dụng phương thức storeAs() -> filesystems.php
- delete:
    Khi thực hiện xóa 1 slide nào đó thì hình ảnh của slide đó cũng phải xóa đi
    Để xóa tấm hình của slide thì cần phải biết tên của slide đó là gì
    Keyword: File storage

  =============================================== Xây dựng chức năng Edit ============================================
- validate thumb:
    old()
    Nếu mà là Edit thì không cần phải validate require trường thumb
- validate name:
    Khi validate trường name thì kiểm tra name có bị trùng hay không, nếu mà name đã có rồi thì sẽ không cho người dùng 
        thêm name đã bị trùng nữa
    Khi Edit thì validate unique không so sánh với name hiện tại của nó mà chỉ so sánh với các name khác
- edit:
    Có 2 trường hợp đó là có Edit và không Edit thumb
    Trường hợp Edit mà upload tấm hình mới lên thì phải xóa tấm hình cũ ở trên server đi rồi upload hình ảnh mới
- optimize:
    Làm gọn lại phần xử lý upload tập tin: Xóa và upload tập tin
    Khi lưu dữ dữ liệu chứa trong biến $params thì đều thực hiện xóa đi các field mà không cần insert
    Khi upload hình ảnh thì đối tượng thumb ngoài phương thức storeAs() thì có thể dùng phương thức đó là move()
- AdminModel:
    Tạo thêm AdminModel để định nghĩa những phương thức dùng chung
  =============================================== Hiển thị Slider ngoài Frontend ============================================
- route:
    Tạo link cho trang home
- theme:
    Nhúng giao diện cho trang home
- get slider:
    Có 1 số nơi như ở trang chủ của mình thì cần dùng Slider, nhưng qua 1 số trang khác như Category hay hiển thị chi tiết
        1 bài viết nào đó thì nó cũng không cần Slide, tuy nhiên sau 1 time nào đó thì chưa chắc chắn rằng liệu người dùng
        có muốn dùng hay không
        -> Phần slider nó có thể xuất hiện ở phần Category cũng được hay cũng có thể xuất hiện ở phần chi tiết 1 bài viết 
        cũng được
        -> Viết code để có thể dễ dàng tái sử dụng nó được -> tách slide ra thành 1 khối(block)
    Lấy dữ liệu và truyền ra ngoài view
- show slider:
    Đổ dữ liệu slider ra ngoài view
    Khi có nhiều hơn 1 cái slide thì mới hiển thị 2 nút Next và Previous
  =============================================== Hiển thị Category ngoài Frontend ============================================
- admin:
    migration seed category table
    Xây dựng phần quản lý Category rồi sau đó hiển thị nó ra ngoài trang chủ
    Khai báo route
    Khai báo Controller
    Khai báo Model
    Khai báo request
    Khai báo nơi chứa view
    Khai báo phần config search(khai báo cho box search) và button cho Category:
        'category' => ['all', 'id', 'name']
        'category'  =>  ['edit', 'delete']
    form: Không còn biến inputHiddenThumb
- frontend:
    Đổ category ra thành menu ở phía ngoài frontend
    Danh sách menu ở trên các view của frontend là được lặp lại(home,category, article...)
        Do đó nếu viết phần lấy ra danh sách menu trên Controller để truyền ra ngoài view thì phần code của ta sẽ bị lặp lại
        =>Từ view(elements), gọi trực tiếp đến CategoryModel để lấy ra được danh sách category để hiển thị mà không cần thông qua Controller
 =============================================== Cấu hình Category ngoài trang chủ ============================================
- show isHome:
    Hiển thị cột isHome lên trang quản lý category
    Giá trị của trường is_home là yes/no
    Trên trang chủ thì có 1 nơi để hiển thị lên các bài viết trong 1 category nào đó, không phải là tất cả các category đều cho hiển thị 
        ngoài trang chủ -> chỉ có những category nào có trường is_home có giá trị là yes thì mới cho hiển thị lên trên đó
    Bổ sung phần is_home trong phần quản lý của category(tương tự như phần trạng thái của 1 category nào đó)
        yes: Hiển thị, no: Không hiển thị
- change isHome:
    Thực hiện thay đổi trạng thái của is_home trên trang quản lý category
    Tương tự như chức năng thay đổi status
 =============================================== Cấu hình kiểu hiển thị của Category ============================================
- fix image:
    Tách phần hiển thị nội dung trang index thành các block
    Trong tập tin index nó cũng có nhiều phần gộp lại(category) -> tách ra làm các children
- get category:
    Lấy ra các category được phép xuất hiện ngoài trang chủ(index)
    Trong phần category hiển thị ở trên view index thì có 2 loại view đó là: 
        Những bài viết có mỗi bài viết hiển thị ở trong một dòng(loại list)
        Những bài viết có 2 bài viết hiển thị ở trong 1 dòng(loại grid)
        -> Phải xây dựng trên phần quản lý category là category đó hiển thị lên trên trang index là loại list hay là grid
- show display:
    Xây dựng thêm phần hiển thị để cho biết category đó là đang được hiển thị theo kiểu nào(list or grid) trên index 
    Cho nó được hiển thị bởi SelectBox để có thể hiển thị được nhiều kiểu khác nhau
- change display:
    Khi thay đổi giá trị kiểu hiển thị của Category ở SelectBox thì sẽ thực hiện thay đổi ở database 
    Khi thay đổi options trong SelectBox thì sẽ gọi đến route khai báo trong SelectBox
        -> javascript
- show category:
    Sau khi ở trang chủ bổ xung thêm chức năng thay đổi kiểu hiển thị category -> load kiểu giao diện của các category lên trên view 
        index dựa vào giá trị kiểu hiển thị của từng category
    Thứ tự hiển thị sẽ là grid -> list hoặc ngược lại, do đó ở câu lệnh truy vấn query có thể dùng orderBy theo giá trị của display
 =============================================== Xây dựng chức năng Quản lý bài viết ============================================

- clone article: Tương tự cũng giống như các phần quản lý khác
    Gắn link cho slidebar: Để khi click vào trên menu thì nó sẽ ra phần quản lý
    Chuẩn bị hình ảnh
    Khai báo Router
    Cấu hình cho article trong phần zvn.php(search, button và form_ckeditor)
        form_ckeditor: Khi thêm mới thì nội dung của bài viết có thể định dạng như in đậm, nghiêng...
    Thêm CKEDITOR
        CKEditor 4
    ArticleController
    ArticleRequest
- selectbox category: Tạo SelectBox Category lên form article
    Khi thực hiện thêm mới bài viết thì cần đưa vào thêm 1 field để chọn category
    Keyword: Laravel get data id name for selectbox -> pluck() 
- show category:
    Hiển thị thông tin bài viết đó thuộc về category nào
    Có thể làm theo kiểu thiết lập mối quan hệ re hoặc sử dụng câu lệnh join
    Keyword: relationship, join, laravel query builder set alias
 =============================================== Xây dựng chức năng bài viết nổi bật ============================================

- show featured: 
    Hiển thị kiểu bài viết đó là kiểu gì(Nổi bật hay bình thường)
    Dựa vào giá trị của trường type của bài viết đó để phân biệt bài viết đó có phải là bài viết nổi bật hay không
- change featured: Xử lý thay đổi giá trị kiểu bài viết
    ArticleController -> bổ sung type()
    ArticleModel -> Save đối với trường hợp change-type
- get featured: 
    Lấy ra danh sách các bài viết nổi bật để hiển thị lên trang chủ
    Bài viết nổi bật thì cho hiển thị lên trang chủ 3 bài bao gồm 1 bài viết bên tay trái với hình ảnh lớn, 2 bài bên tay phải với hình
        ảnh nhỏ
- featured left: Hiển thị bài viết feature nằm ở bên tay trái
    Ctrl F5 (or Ctrl + F5) reloads the current page including the browser cache
    Lấy phần tử đầu tiên trong danh sách 3 phần tủ nổi bật    
        \s+ matches any whitespace character (equal to [\r\n\t\f\v ])
        + Quantifier — Matches between one and unlimited times, as many times as possible, giving back as needed (greedy)
        $ asserts position at the end of a line
        S là phủ định của s
    partials: Chứa các thành phần chứa mã html dùng chung
        Cấu trúc khi hiển thị bài viết bên trái và bên phải là giống nhau -> Có thể làm gọn code
        -> Tách cấu trúc bài viết ra thành image và content
- featured right: Hiển thị bài viết feature nằm ở bên tay phải
    Xóa đi phần tử item đầu tiên(đã được hiển thị ở bên trái)
 =============================================== Hiển thị bài viết mới nhất ============================================
 
- latest: Hiển thị các bài viết mới nhất
 =============================================== Hiển thị bài viết trong category ngoài trang chủ ============================================

- get: Lấy ra những bài viết trong category nào đó được xuất hiện ngoài trang chủ
    Keyword: Grouping Collection Elements With groupBy
- show list: Hiển thị phần dữ liệu theo kiểu list
- show grid: Hiển thị phần dữ liệu theo kiểu lưới
 =============================================== Hiển thị bài viết trong category ============================================
  Khi click vào 1 category nào đó thì nó sẽ hiển thị các bài viết trong category đó
- template:
    Gắn link cho các category đó
    Dạng url muốn xây dựng là: chuyen-muc/suc-khoe-3.html
        chuyên mục/tên chuyên mục - id
    folder news: Chứa các Controller của News
- link category: Gắn link cho các category
    The Str::slug method generates a URL friendly "slug" from the given string:
        $slug = Str::slug('Laravel 5 Framework', '-');
        // laravel-5-framework
    Khi thực hiện click vào category thì active category đó lên, để active được thì cần phải lấy được category nào đang được 
    chọn hay có nghĩa là cần phải lấy được id -> lấy được từ trên URL
- show articles: Lấy các bài viết trong category nào đó để đổ ra ngoài giao diện
    Category đó thuộc kiểu list thì các bài viết của nó cũng phải được hiển thị theo kiểu list, kiểu lưới thì các bài viết của nó cũng phải được
        hiển thị theo kiểu lưới
- breadcrumb:
    breadcrumb
    Khi vào trang category bất kỳ mà không có kết quả bài viết nào thì redirect về trang home
- URL:
    Thao tác gắn link thì phải thực hiện nhiều lần ở nhiều chỗ khác nhau -> tạo ra 1 helper để chuyên thực hiện công việc tạo link
    Sử dụng helper này gắn link cho các category, phần category ở phần latest
    
 =============================================== Hiển thị chi tiết bài viết ============================================
- template: Nhúng giao diện xem chi tiết bài viết 
    Khai báo route
    Dạng url muốn xây dựng là: bai-viet/suc-khoe-3.html
        bài viết/tên của bài viết - id
    Đổ giao diện hiển thị chi tiết bài viết
- link article: Gắn link để người dùng có thể xem chi tiết 1 bài viết nào đó
    Bài viết nổi bật
    Bài viết mới nhất
    Các bài viết nằm trong 1 category nào đó
-   breadcrumb: Thực hiển thị breadcrumb của bài viết
- show article: Hiển thị nội dung chi tiết của 1 bài viết
    Cấu tạo thì cũng có 2 phần đó là image và content
    image: Có thêm class="img-fluid w-100"
    content: Hiển thị hết nội dung của bài viết, không thực hiện cắt chuỗi
 =============================================== Hiển thị danh sách bài viết cùng category ============================================
- get related:
    Lấy ra danh sách các bài viết nằm trong cùng category với bài viết hiện tại và loại trừ đi bài viết hiện tại
    Hiển thị theo kiểu của category: danh sách hay lưới
- show related:
    Khi không có bài viết nào thì không hiển thị phần bài viết liên quan
Error 404
 ============================================ Quản lý người dùng ============================================

- list: Trang hiển thị danh sách user
    md5('123456'): e10adc3949ba59abbe56e057f20f883e
- form add: 
    Thêm mới user
    Bổ sung thêm level cho user: user đó là là người dùng bình thường hay là admin
    Khi thêm user thì tiến hành nhập password cho user đó
        Confirm password(Validate)
        Keyword: validate password
        Khi lưu vào database thì cần phải mã hóa mật 
        Ví dụ cách mã hóa mật khẩu an toàn hơn: username_password_ngaytao
- form info:
    Khi thực hiện Edit thì có các trường hợp edit:
        edit các thông tin về info của người dùng đó: username, email, fullname, status, avatar
        Trong trường hợp cập nhật thông tin user thì tắt đi validate password 
        edit mật khẩu của user
        Cấp quyền cho user(thay đổi level)
    Do đó thì tách tập tin form đã tạo thành các tập tin form khác nhau để sử lý các loại công việc khác nhau
    Trong trường hợp chỉ cập nhật thông tin cơ bản của 1 user nào đó(username, email, status...) thì không cần validate password
- form change password: Thay đổi password cho người dùng
- form change level: Thay đổi level của 1 user nào đó
 ============================================ Giới hạn vùng truy cập ============================================
Thực hiện chức năng đăng nhập:
    Phần front thì ai cũng có thể xem được, phần này không cần login
    Vùng user: Là phần cần phải login, user này có level là member
    Vùng quản trị: Cần phải login và level phải là login
    Laravel Document: Security -> Authentication
    Keyword: Laravel login, laravel Authentication
    Ở phần này sẽ tiến hành làm theo cách thông thường đó là khi đăng nhập sẽ tiến hành kiểm tra tài khoản đó có tồn tại
        trong database không, nếu có thì tiến hành lưu thông tin tài khoản vào Session, rồi dựa vào đó biết được quyền của Người
        dùng cũng như là kiểm tra người dùng này đã đăng nhập hay chưa
- login template
    'autofocus' => true: Ban đầu vào trang login thì mặc định là focus lên ô input email
    Tích hợp giao diện login
    Trên trang login khi nhấn vào nút Login để submit thì gửi dữ liệu trong form đăng nhập qua postLogin, ở đây có nhiệm vụ kiểm tra thông tin
        có hợp lệ hay không
- validate:
    Kiểm tra thông tin người dùng nhập từ form login gửi qua có họp lệ hay không
    Để phát triển hệ thống lên thì có thể dàng buộc các giá trị trên form phức tạp hơn
        password: Phải có 1 ký tự thường, phải có ký tự in hoa, số, ký tự đặc biệt...
- login:
    Kiểm tra 1 người nào đó đăng nhập thành công hay không
    Dựa vào thông tin từ form đăng nhập tìm kiếm trong database xem có giá trị nào trùng khớp hay không, nếu có thì chứng tỏ đó là thông tin của
        người dùng, họ đã đăng nhập thành công. Nếu không có kết quả nào trong database thì chứng tỏ người dùng đã đăng nhập sai
    Khi thông tin user người dùng đã đúng nhưng mà giá trị của status là inactive thì có thể hiển thị lên câu thông báo là tài khoản bị khóa...
MethodNotAllowedHttpException redirect to 404
- logout:
    Khi user đăng nhập thành công thì lưu thông tin của user đó vào trong Session và redirect về trang chủ
    session('userInfo'): Lấy giá trị session trên blade
    Nếu đã đăng nhập thành công thì trên menu cho hiển thị là Logout, Nếu chưa đăng nhập thì hiển thị nút đăng nhập
    Khi Logout thì xóa thông tin session lưu thông tin người dùng, sau khi xóa session thì redirect về trang chủ
- check login:
    Khi đã login rồi mà cố tình quay lại trang login bằng cách nhập trên URL thì sẽ chuyển về trang home, nhưng ngoài ra cũng tiến hành check 
        ở các màn hình mà yêu cầu login xong mới vào được -> sử dụng middleware để kiểm tra login
    Keyword: Laravel middleware
        Khi vào 1 link bất kỳ nếu mà middleware kiểm tra thành công thì sẽ tiếp tục truy cập vào link đó, còn không thì sẽ redirect về trang home
    Khi sử dụng 1 middleware thì cần đăng ký trong app/Http/Kernel.php
    Khi có middleware và đăng ký xong thì cần phải cho biết middleware này được sử dụng cho những màn hình nào -> khai báo trong route
- admin area: Giới hạn vùng truy cập những người có có quyền admin thì mới có thể truy cập vào vùng quản trị
    Nếu như 1 người chưa đăng nhập mà cố tình vào trang admin thì sẽ được đẩy về trang login
    Đã đăng nhập và cố tình vào trang login:
        Nếu người dùng đó có level là admin thì truy cập bình thường
        Nếu người dùng đó có level không phải là admin thì sẽ đẩy về trang notify(noPermission)
    
 ============================================ Nâng cấp lên laravel 8 ============================================
Nâng cấp từ 5.8 lên 8.x
    composer update
Cài đặt Laravel 8.x và copy source
    

 ================================== Xây dựng Admin quản trị tin tức tổng hợp RSS ==================================
database
    php artisan make:migration create_rss_table
    php artisan make:seeder RssSeeder
RSS Admin

 ================================== Xây dựng Frontend hiển thị tin tức RSS ==================================

Đọc RSS VNExpress
Đọc Rss TuoiTre
Hiển thị danh sách tin

 ================================== Kỹ thuật đọc giá vàng ==================================

Lấy giá vàng SJC XML
 ================================== Kỹ thuật khai thác API Coinmarketcap ==================================

Khai thác API Coinmarketcap

 ================================== Áp dụng ajax cho phần Frontend tin tức tổng hợp ==================================

Ajax hiển thị bảng giá vàng và giá coin

 ================================== Áp dụng ajax cho các chức năng ở Admin ==================================

Ajax Status
    